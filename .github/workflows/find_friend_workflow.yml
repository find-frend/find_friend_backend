name: find friend workflow

# Workflow будет срабатывать на команду push в ветку develop
# После тестирования изменим на main
on:
  push:
    branches: [ develop ]

# После срабатывания "on" выполнятся следующие действия:
jobs:
  # Проверяем код в папке src/ с помощью flake8
  tests:
    name: Code test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return mypy
        pip install -r ./src/requirements.txt

    - name: Test with flake8
      run: |
        cd src/
        python -m flake8

  # Создаем архив проекта и копируем его на сервер
  copy_project_on_server:
    name: Copy project on server
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v3
    - name: Create archive with project
      run: |
        mkdir ../build
        cp -TR . ../build
        tar -cvf deploy.tar ../build/

    - name: Copy archive on server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "deploy.tar"
        target: "/home/${{ secrets.USER }}/"

  # Распаковываем архив и через docker-compose собираем
  # и запускаем контейнер с бэкендом
  deploy:
    name: Deploying on remote server
    runs-on: ubuntu-latest
    needs: copy_project_on_server
    # На Этапе разработки стоит условие, что push должен осуществляться в ветку develop
    # После тестирования необходимо поменять на main
    if: github.ref_name == 'develop'
    steps:
      - name: Run bot in docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # Заходим в домашнюю директорию. В ней находится архив.
          # Распакуем архив. После распаковки удалим его.
          # Заходим в директорию с проектом.
          # Если в директории оказался .env файл - удаляем его.
          # Создаем .env файл
          # Заходим в директорию с docker-compose.yaml.
          # Останавливаем работающие контейнеры и удаляем их.
          # Удаляем все имеющиеся на сервере docker-образы.
          # Запускаем docker-compose в фоновом режиме.
          script: |
            cd /home/${{ secrets.USER }}/
            tar -xvf deploy.tar
            rm deploy.tar
            cd build/
            rm -f .env
            touch .env
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            cd infra/prod/
            docker compose -f ./docker-compose.prod.yaml up -d --build --force-recreate
            docker exec -i prod-backend-1 python manage.py migrate
            docker exec -i prod-backend-1 python manage.py collectstatic --no-input
